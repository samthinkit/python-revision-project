# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ecT1en48FNv18ySeUM-DUOPKMPWlcWGb

CLASSES AND INSTANCES

classes allow us to logically group our data and functions in a way that is easy
to reuse to build upon
it is like bluprint that we dont need rewrite many times
"""

class Employee:
    pass

emp_1=Employee()
emp_2=Employee()  

print(emp_1)
print(emp_2)

emp_1.first='alley'
emp_1.last= 'bailey'
emp_1.pay = 20000
emp_1.email='alley.bailey@hotmail.com'

emp_2.first='ponzi'
emp_2.last='scheme'
emp_2.pay=30000
emp_2.email='ponzi.scheme@email.com'   

## RATHER THAN  DOING THIS STAFF, WE SHOULD BE CREATING INSTANCES AUTOMATICALLY

##SOLUTION
class Employee:
  pass
  numberofemp=0
  raise_amount= 1.1
  def __init__(self, first, last, pay):  #init method is a constructor for another language term
    self.first= first
    self.last = last
    self.pay = pay
    self.email = first + "." + last +'@dundermuflin.com' 
    Employee.numberofemp += 1

  def fullname(self):  #creating method takes instance of inside
    return '{} {}'.format(self.first, self.last)

  def apply_raise(self):
    self.pay = int( self.raise_amount* self.pay)  


       

print(Employee.numberofemp) # check

emp1=Employee('alley','bailey', 20000) #unique instances of class or instance variables
emp2=Employee('ponzi','scheme', 30000) #unique instances of class     


print(emp1.email)
print(emp2.email) 
print(emp1.fullname()) 
print(emp2.fullname())  

print(Employee.fullname(emp1))  # same as print(emp1.fullname()) 
                                ##Employee.fullname() # class method needs an instance
print(emp1.pay)
emp1.apply_raise()
print(emp1.pay)

print(Employee.raise_amount)  #access raise_amount
print(emp1.raise_amount)
print(emp1.__dict__)   # no raise_amount variable exist

emp1.raise_amount = 1.5 # when class name used to change, it changes every raise_amount
                        # however emp1 is used to change raise_amount, it did not change 

print(Employee.raise_amount) # value did not change even if emp1.raise_amount =1.5
print(emp1.raise_amount)  # value did change since coded above
print(emp1.__dict__)  

print(Employee.numberofemp)

"""class method"""

#class method, #regular method #static method
 #regular method  takes instance automatcally namely'self'

##SOLUTION
class Employee:
  
  numberofemp=0
  raise_amount= 1.04
  def __init__(self, first, last, pay):  #init method is a constructor for another language term
    self.first= first
    self.last = last
    self.pay = pay
    self.email = first + "." + last +'@dundermuflin.com' 
    Employee.numberofemp += 1

  def fullname(self):  #creating method takes instance of inside
    return '{} {}'.format(self.first, self.last)

  def apply_raise(self):
    self.pay = int( self.raise_amount* self.pay)  


  @classmethod
  def set_raise_amount(cls, amount):  #working with class instead of instance #cls class variable
    
    cls.raise_amount = amount

  @classmethod
  def string_method(cls, emp_str):
    first, last, pay = emp_str.split('-')
    return cls(first, last, pay)

emp1=Employee('alley','bailey', 20000) #unique instances of class or instance variables
emp2=Employee('ponzi','scheme', 30000) #unique instances of class   


Employee.set_raise_amount(1.09)  #same as Employee.raise_amount = 1.09 
                                 # we use class method instead


emp_str1='John-doe-70000'
emp_str2='mary-kyle-50000'
emp_str3='dole-mono-30000'
emp_str4='firuze-kobol-60000'

#first, last, pay = emp_str1.split('-'),  we do this instead to automatise by using class method
new_emp_1 = Employee.string_method(emp_str1) #pass name using init method
new_emp_3 =Employee.string_method(emp_str3)

print(Employee.raise_amount)
print(emp1.raise_amount)
print(emp2.raise_amount)

print(new_emp_1.pay)
print(new_emp_1.email)
print(new_emp_3.last)

"""static method"""

#static methods
# static method dont pass instance or class
##SOLUTION
class Employee:
  
  numberofemp=0
  raise_amount= 1.04
  def __init__(self, first, last, pay):  #init method is a constructor for another language term
    self.first= first
    self.last = last
    self.pay = pay
    self.email = first + "." + last +'@dundermuflin.com' 
    Employee.numberofemp += 1

  def fullname(self):  #creating method takes instance of inside
    return '{} {}'.format(self.first, self.last)

  def apply_raise(self):
    self.pay = int( self.raise_amount* self.pay)  


  @classmethod
  def set_raise_amount(cls, amount):  #working with class instead of instance #cls class variable
    
    cls.raise_amount = amount


  @classmethod
  def string_method(cls, emp_str):
    first, last, pay = emp_str.split('-')
    return cls(first, last, pay)
  @staticmethod    #static method used when you dont need to access clas variable like cls above
                   # below static method uses bcs no need to call class variable
  def workday_check(day):
    if day.weekday() == 5 or day.weekday() == 6:
      return False
    else:
      return True  


import datetime as dt
my_date=dt.date(2021, 4, 8)

print(Employee.workday_check(my_date))


emp1=Employee('alley','bailey', 20000) #unique instances of class or instance variables
emp2=Employee('ponzi','scheme', 30000) #unique instances of class

"""Inheritance and creating subclasses"""

class Employee:
  

  raise_amount= 1.04
  def __init__(self, first, last, pay):  #init method is a constructor for another language term
    self.first= first
    self.last = last
    self.pay = pay
    self.email = first + "." + last +'@dundermuflin.com' 


  def fullname(self):  #creating method takes instance of inside
    return '{} {}'.format(self.first, self.last)

  def apply_raise(self):
    self.pay = int( self.raise_amount* self.pay) 



class developer(Employee):  #inherit from employee class instead of copy code , reuse Employee class
  raise_amount = 1.5
  def __init__(self, first, last, pay, native_language):
    super().__init__(first,last,pay)
    self.native_language=native_language


class manager(Employee):
  
  def __init__(self, first, last, pay, native_language, employees=None):
    super().__init__(first,last,pay)
    self.native_language=native_language
    if employees == None:
      self.employees = []
    else: 
      self.employees = employees
  
  
  def add_emp(self, emp):
    if emp not in self.employees:
      self.employees.append(emp)
  
  def remove_emp(self, emp):
    if emp in self.employees:
      self.employees.remove(emp)                                   

  def print_emps(self):
    for emp in self.employees:
      
      print('-->', emp.fullname())  


dev1 = developer('alley','bailey', 20000, "urduca")  #it is inherited from Employee
dev2 = developer('ponzi','scheme', 30000, "göktükçe" ) 


manager1 = manager( "Sue", "Smith", 90000, [dev1] )


print(isinstance(manager1,manager)) #check if manager1 is intance of manager


print(isinstance(manager1,Employee)) # check if manager is an instance  of Employee
print(isinstance(manager1,developer)) # manager1 is not instance of 
print(issubclass(developer,Employee)) #developer is subclass of Employee
print(issubclass(manager,developer)) # manager is not subclass of developer

print(manager1.email)

manager1.add_emp(dev1)
manager1.add_emp(dev2)
manager1.remove_emp(dev1)
manager1.print_emps()


print(dev1.native_language)
print(dev2.email)
#print(help(developer))
print(dev1.pay )
dev1.apply_raise()
print(dev1.pay)
print(Employee.raise_amount)
print(developer.raise_amount)

""" Special (Magic/Dunder) Methods"""

class Employee:
  

  raise_amount= 1.04
  def __init__(self, first, last, pay):  #init method is a constructor for another language term
    self.first= first
    self.last = last
    self.pay = pay
    self.email = first + "." + last +'@dundermuflin.com' 


  def fullname(self):  #creating method takes instance of inside
    return '{} {}'.format(self.first, self.last)

  def apply_raise(self):
    self.pay = int( self.raise_amount * self.pay) 

  def __repr__(self):       #dunder method
    return "Employee('{}', '{}', {}')".format(self.first, self.last, self.pay)

  def __str__(self):   #dunder method  this putowrk above dunder method
    return "'{}' -- '{}'".format(self.fullname(), self.email )  

  def __add__(self, other):
    return self.pay + other.pay      #other taken from "pay" data

  def __len__(self):
    return len(self.fullname())  

emp1=Employee('alley','bailey', 20000) #unique instances of class or instance variables
emp2=Employee('ponzi','scheme', 30000) #unique instances of class       


print(emp1)
print(repr(emp1))
print(str(emp1))

print(emp1.__repr__())
print(emp1.__str__())


print(int.__add__(1,4))  # dunder method same as print(1+4)  


print(emp1+emp2)


print(emp2.__len__())


#return not implemented means do not implement it and pass the object to other operation

""" Property Decorators - Getters, Setters, and Deleters"""

class Employee:
  

  raise_amount= 1.04
  def __init__(self, first, last) :  #init method is a constructor for another language term
    self.first= first
    self.last = last
    # this is not neeeded       self.email = first + "." + last +'@dundermuflin.com' 
  
  @property
  def email(self):  #creating method takes instance of inside
    return '{}.{}@dundermuflin.com'.format(self.first, self.last)
  
  @property
  def fullname(self):  #creating method takes instance of inside is not callable
    return '{} {}'.format(self.first, self.last)
  
  @fullname.setter 
  def fullname(self,name):
    first, last = name.split(" ")
    self.first=first
    self.last=last
  
  @fullname.deleter
  def fullname(self):
    print("Delete Name!")
    self.first=None
    self.last=None

emp1 = Employee('John', 'Smith')
emp1.first='ali'
emp1.fullname = 'koray birand'
print(emp1.first)
print(emp1.email)
print(emp1.fullname)

del emp1.fullname